---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-push
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Buildah Multi-Architecture Image Push
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: image-push
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    This buildah task will allow a user to push their multi-architecture container
    images to a given repository. It is based on the Buildah 0.3 task from hub.tekton.dev.
  params:
    - name: MANIFEST
      description: Name of the manifest that should be pushed
      default: tekton-image-build
    - name: IMAGE
      description: Reference of the image buildah will produce.
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.23.0
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
    - name: FORMAT
      description: The format of the built container, oci or docker
      default: "oci"
    - name: PUSH_EXTRA_ARGS
      description: Extra parameters passed for the push command when pushing images.
      type: string
      default: ""
    - name: PUSH_ALL
      description: "Set to `true` or `false`"
      type: string
      default: "true"
  workspaces:
    - name: source
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  steps:
    - name: list-container-images
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      script: |
        buildah ls -a
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true

    - name: push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      script: |
        PUSH_ALL="$( if [$(params.PUSH_ALL) = true ]; then echo '--all'; fi )"
        buildah manifest push \
          $(params.PUSH_EXTRA_ARGS) \
          --tls-verify=$(params.TLSVERIFY) \
          --format $(params.FORMAT) \
          $(params.MANIFEST) \
          docker://$(params.IMAGE)
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true

  volumes:
    - name: varlibcontainers
      persistentVolumeClaim:
        claimName: varlibcontainers-pvc
