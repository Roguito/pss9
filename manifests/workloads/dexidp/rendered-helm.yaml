---
# Source: dex/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: dex
  labels:
    helm.sh/chart: dex-0.6.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
    app.kubernetes.io/version: "2.30.0"
    app.kubernetes.io/managed-by: Helm
spec:
  minAvailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: dex
      app.kubernetes.io/instance: dex
---
# Source: dex/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  labels:
    helm.sh/chart: dex-0.6.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
    app.kubernetes.io/version: "2.30.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: dex/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dex
  labels:
    helm.sh/chart: dex-0.6.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
    app.kubernetes.io/version: "2.30.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  config.yaml: "Y29ubmVjdG9yczoKLSBjb25maWc6CiAgICBjbGllbnRJRDogJEdJVEhVQl9DTElFTlRfSUQKICAgIGNsaWVudFNlY3JldDogJEdJVEhVQl9DTElFTlRfU0VDUkVUCiAgICBvcmdzOgogICAgLSBuYW1lOiBHb29kTWFubmVyc0hvc3RpbmcKICAgIHJlZGlyZWN0VVJJOiBodHRwczovL2RleC5kYW5tYW5uZXJzLmNvbS9jYWxsYmFjawogIGlkOiBnaXRodWIKICBuYW1lOiBHaXRIdWIKICB0eXBlOiBnaXRodWIKaXNzdWVyOiBodHRwczovL2RleC5kYW5tYW5uZXJzLmNvbQpzdGF0aWNDbGllbnRzOgotIGlkOiA3YjdkYmY1ZjQ1MGJkOWRhMzUwZDI5MTA3YTBmYjNiMTJhZTFiNGUxODg5ODY5OTQzMWU4MmRhNGViMGEzYzg5CiAgbmFtZTogS3ViZXJuZXRlcwogIHJlZGlyZWN0VVJJczoKICAtIGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMAogIHNlY3JldDogZjhjYmMwNDQyYmNhNmRiN2I4ZGY5YjM4N2EwNGVkMWM3MjZlYWVjMDllZDZiZTc1ZDJiZDBjNTdlMGU5MDYxZApzdG9yYWdlOgogIGNvbmZpZzoKICAgIGluQ2x1c3RlcjogdHJ1ZQogIHR5cGU6IGt1YmVybmV0ZXM="
---
# Source: dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
  labels:
    helm.sh/chart: dex-0.6.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
    app.kubernetes.io/version: "2.30.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["dex.coreos.com"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create"]
---
# Source: dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
  labels:
    helm.sh/chart: dex-0.6.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
    app.kubernetes.io/version: "2.30.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: dex
subjects:
- kind: ServiceAccount
  namespace: dex
  name: dex
---
# Source: dex/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dex
  labels:
    helm.sh/chart: dex-0.6.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
    app.kubernetes.io/version: "2.30.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 5556
      targetPort: http
      protocol: TCP
      appProtocol: http
    - name: telemetry
      port: 5558
      targetPort: telemetry
      protocol: TCP
      appProtocol: http
  selector:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
---
# Source: dex/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex
  labels:
    helm.sh/chart: dex-0.6.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
    app.kubernetes.io/version: "2.30.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: dex
      app.kubernetes.io/instance: dex
  template:
    metadata:
      annotations:
      
        checksum/config: 2a0cafd042ccc26caec7233bac56eba9fbfd038b8936297d7a78f7b94b44b28c
      labels:
        app.kubernetes.io/name: dex
        app.kubernetes.io/instance: dex
    spec:
      serviceAccountName: dex
      securityContext:
        {}
      containers:
        - name: dex
          securityContext:
            {}
          image: "ghcr.io/dexidp/dex:v2.30.0"
          imagePullPolicy: IfNotPresent
          args:
            - dex
            - serve
            - --web-http-addr
            - 0.0.0.0:5556
            - --telemetry-addr
            - 0.0.0.0:5558
            - /etc/dex/config.yaml
          env:
          envFrom:
            - secretRef:
                name: dex-config
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
            - name: telemetry
              containerPort: 5558
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: telemetry
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: telemetry
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /etc/dex
              readOnly: true
      volumes:
        - name: config
          secret:
            secretName: dex
      nodeSelector:
        beta.kubernetes.io/arch: amd64
        node-role.kubernetes.io/cloud: "true"
